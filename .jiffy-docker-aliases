# GLOBAL VARIABLES
BASE_DOCKER_COMPOSE_COMMAND="docker-compose -f docker-compose.yml"
DOCKER_RAILS_COMMAND="$BASE_DOCKER_COMPOSE_COMMAND exec -e COLUMNS=jd_stty_cols -e LINES=jd_stty_rows rails"

# BASE ALIAS
alias dc="$BASE_DOCKER_COMPOSE_COMMAND"

# Functions

# Attach to process running inside docker container
function jd_attach() {
  attach_to=$1
  docker attach $(docker ps | grep $attach_to | tr -s " " | cut -d " " -f 1)
}

# Docker attach or exec console's height and width
function jd_stty_rows {
  tput lines
}

function jd_stty_cols {
  tput cols
}

# Running Rubocop for code changes
function run_rubo_bc() {
  dc run --rm rails bash -c -l "git ls-files -m | xargs ls -1 2>/dev/null | grep '\.rb$' | xargs bundle exec rubocop"
}

function run_rubo_ac() {
  dc run --rm rails bash -c -l "git diff-tree -r --no-commit-id --name-only head origin/master | xargs bundle exec rubocop"
}

# Running Feature specs
function jd_fspec() {
  spec_file=${1:-""}
  reskinned=${2:-""}
  dc run --rm -p 5900:5900 rails bash -c -l "FEATURES_HEADED=yes $reskinned bin/scripts/run_features.sh $spec_file"
}

# Running Migrations/Rollbacks
# Running ROllback
function run_rollback() {
  echo "Running Rollback for Dev Environment"
  dc exec rails bundle exec rails db:rollback

  echo "Running Rollback for Test Environment"
  dc exec rails bundle exec rails db:rollback RAILS_ENV=test
}

# Running Migrations
function run_migrations() {
  checkout_changes=true
  if git status --porcelain | grep db/; then
    checkout_changes=false
  fi

  echo "Running Migrations for Dev Environment"
  dc exec rails bundle exec rails db:migrate

  echo "Now Running migrations for Test Env"
  dc exec rails bundle exec rails db:migrate RAILS_ENV=test

  if $checkout_changes; then
    echo "checking out db/structure.sql changes"
    git co db/structure.sql
  else
    echo "not checking out structure file changes as we have added migrations"
  fi
}

# build, upload and deploy to stack mentioned in argument
# Build Upload and Deploy
function jd_deploy() {
  echo "Stopiing containers for deploy"
  dc stop rails webpacker sidekiq kibana
  source ~/.jiffy-deploy-env

  dc run --rm \
    -e AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID \
    -e AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY \
    -e AWS_REGION=$AWS_REGION \
    -e DEPLOY_BUCKET=$DEPLOY_BUCKET \
    -e PACKAGE_FOLDER=$PACKAGE_FOLDER \
    rails bash -l -c "./bin/deploy.sh $1"

  echo "Starting containers back up"
  dc start rails webpacker sidekiq kibana
}

# Run any Code in Docker Ruby
function run_in_docker() {
 ruby_version=$1

 docker run --rm -it -v ${PWD}:/home/app ruby:$ruby_version bash
}

# Get IP of any AWS EC2 instance of stack
function jiffy_ip() {
  stack=${1:-"jakku"}
  layer=${2:-"rails"}

  if [ $layer = "sidekiq" ]
  then
    stack_layer="opsworks:layer:sidekiq"
  else
    stack_layer="opsworks:layer:rails-app"
  fi

  aws ec2 describe-instances --filters "Name=tag:opsworks:stack,Values=$stack" "Name=tag-key,Values=$stack_layer" --query "Reservations[].Instances[].PublicDnsName" --output text
}

function jiffy_travis_download() {
  build_number=${1}
  rm -f ${PWD}/tmp/screenshots/screenshots/*.html
  rm -f ${PWD}/tmp/screenshots/screenshots/*.png
  aws s3 cp s3://jiffy-travis-artifacts/$build_number ${PWD}/tmp/screenshots/ --recursive
}

# Aliases
alias jd_be="$DOCKER_RAILS_COMMAND bundle exec"
alias jd_bi="$DOCKER_RAILS_COMMAND bundle"
alias jd_rails_bash="$DOCKER_RAILS_COMMAND bash"
alias jd_rails_c="$DOCKER_RAILS_COMMAND bundle exec rails c"
alias jd_attach_rails="jd_attach rails"
alias jd_rspec="$DOCKER_RAILS_COMMAND bundle exec rspec"
alias jd_postgres="$BASE_DOCKER_COMPOSE_COMMAND exec postgres psql -U postgres -d jiffyshirts_development"
alias jd_rubo="$DOCKER_RAILS_COMMAND bundle exec rubocop -a"
alias jd_webpack="$DOCKER_RAILS_COMMAND bash -l -c bin/webpack-dev-server"
alias jd_setup_fspec="$DOCKER_RAILS_COMMAND bash -l -c bin/scripts/setup_features.sh"
alias jd_update_db="$DOCKER_RAILS_COMMAND bundle exec rails db:bootstrap_jiffy REINDEX=false DOWNLOAD=true RESET_SCHEMA=true"

alias jd_rubo_ac="run_rubo_ac"
alias jd_rubo_bc="run_rubo_bc"

alias jd_migrate="run_migrations"

alias jd_rollback="run_rollback"

alias dps_pretty="docker ps -a --format=\"table {{.ID}}\t{{.Names}}\t{{.Status}}\t{{.Ports}}\""
