#!/bin/sh

# Utility Function to install packages
install_packages() {
  packages=("$@")

  for package in "${packages[@]}"; do
    if ! dpkg -s "$package" >/dev/null 2>&1; then
      sudo apt install -y "$package"
    else
      echo "$package is already installed"
    fi
  done
}

SYSTEM_TYPE=$(uname -s)

# Install Oh My Zsh (optional)
if [ ! -d ~/.oh-my-zsh ]; then
  sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
fi

# MAC Specific setup
if [ "$SYSTEM_TYPE" == "Darwin" ]; then
  # Install homebrew if it's missing
  if ! command -v brew >/dev/null 2>&1; then
    echo "Installing homebrew"
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
  fi

  if [ -f "$HOME/config/brewfile/.Brewfile" ]; then
    echo "Updating homebrew bundle"
    brew bundle --file="$HOME/config/brewfile/.Brewfile"
  fi
fi

# Linux specific setup
if [[ "$SYSTEM_TYPE" == "Linux" ]] ; then
  # Add a new non-sudo user
  sudo adduser praveen

  # Install necessary packages
  sudo apt update
  # Install necessary packages 
  packages=(
    git
    build-essential
    libssl-dev
    libreadline-dev
    zlib1g-dev
    python3
    python3-pip
    shared-mime-info
    zip
    unzip
    zsh
  )

  install_packages "${packages[@]}"

  # install linuxbrew
  if ! command -v brew >/dev/null 2>&1; then
    echo "Installing homebrew"
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

    test -d ~/.linuxbrew && eval "$(~/.linuxbrew/bin/brew shellenv)"

    if [ -f "$HOME/config/brewfile/.Brewfile" ]; then
      echo "Updating homebrew bundle"
      brew bundle --file="$HOME/config/brewfile/.Brewfile"
    fi
  fi

  install_packages packages

  optional_packages=(
    libsqlite3-dev
    postgresql-13
    postgresql-client-13
    redis-server
    apt-transport-https
    elasticsearch=7.10.2
    kibana=7.10.2
  )

  for package in "${optional_packages[@]}"; do
    read -p "$package is not installed. Do you want to install it? (y/n)" choice 
    case "$choice" in 
      y|Y ) sudo apt install -y "$package";; 
      n|N ) echo "Skipping $package";; 
      * ) echo "Invalid choice. Skipping $package";; 
    esac
  done

  # Install nerd fonts
  if fc-list | grep -i "FiraMono" >/dev/null 2>&1; then
    echo "FiraMono is already installed"
  else
    echo "Installing FiraMono"
    git clone --filter=blob:none --sparse git@github.com:ryanoasis/nerd-fonts
    cd nerd-fonts
    ./install.sh FiraMono

    # cleanup
    cd ..
    rm -rf nerd-fonts
  fi
fi

# OS agnostic setup
#
# NODE JS 
read -p "Do you want to install nodejs > " choice
INSTALL_NODE=false
case "$choice" in
  y|Y) INSTALL_NODE=true;;
  *) echo "Skipping nodejs installation";;
esac

if $INSTALL_NODE; then
  if ! command -v nvm >/dev/null 2>&1; then
    echo "Installing nvm"
    curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.4/install.sh | bash
  fi
  # Load nvm
  NVM_DIR="$HOME/.nvm"
  [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
  # Install nodejs via nvm
  nvm install node
  nvm install 16 # dependency for copilot nvim
fi

# RVM
read -p "Do you want to install rvm > " choice
INSTALL_RUBY=false
case "$choice" in
  y|Y ) INSTALL_RUBY=true;;
  * ) echo "Skipping ruby installation";;
esac

if $INSTALL_RUBY; then
  if ! command -v rvm &> /dev/null 2>&1; then
    curl -sSL https://rvm.io/mpapis.asc | gpg --import -
    curl -sSL https://rvm.io/pkuczynski.asc | gpg --import -
    curl -sSL https://get.rvm.io | bash -s stable --ruby
    source ~/.rvm/scripts/rvm
    rvm install 2.7.6
  else
    echo "RVM is already installed"
  fi
fi

# Postgres
if ! command -v psql &> /dev/null 2>&1; then
CREATE_POSTGRES_USER=false
  read -p "Do you want to create a new postgres user > " choice
  case "$choice
    y|Y ) CREATE_POSTGRES_USER=1;;
    * ) echo "Skipping postgres user creation";;
  esac

  if $CREATE_POSTGRES_USER; then
    read -p "Enter the username: " username
    if ! sudo -u postgres psql -tAc "SELECT 1 FROM pg_roles WHERE rolname='$username'" | grep -q 1; then 
      sudo -u postgres createuser -s $username 
      sudo -u postgres createdb $username
      sudo su - postgres -c "psql -c \"GRANT ALL PRIVILEGES ON DATABASE $username TO $username;\""
    else
      echo "PostgreSQL is already configured for $username user"
    fi
  fi
fi

# Check if fd symlink already exists before creating
if [ ! -L /usr/local/bin/fd ]; then
  ln -s "$(which fdfind)" /usr/local/bin/fd
fi

# Check if ctree is already installed before attempting to install
if [[ "$uname" == "Linux" ]] ; then
  dir=/usr/local/bin
else
  dir=/opt/
fi

if [ ! -d "$dir" ]; then
  git clone git@github.com:shkrt/component_tree.git
  sudo cp -R component_tree/ "$dir"
  sudo chmod a+x "$dir/component_tree/bin/ctree"
  export PATH="$PATH:$dir/component_tree/bin"
fi

# Configure Nvim
if ! command -v nvim &> /dev/null 2>&1; then
  brew install neovim
fi

git clone https://github.com/NvChad/NvChad ~/.config/nvim --depth 1
ln -s ~/.config/nvim_custom ~/.config/nvim/lua/custom
nvim
